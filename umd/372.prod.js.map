{"version":3,"file":"372.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/views/password-reset-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// A password reset form.\r\nimport React from 'react';\r\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\r\n\r\nimport PhoneEdit from '../widgets/phone-edit.jsx';\r\nimport VisiblePassword from '../widgets/visible-password.jsx';\r\n\r\nimport HashNavigation from '../lib/navigation.js';\r\n\r\nconst messages = defineMessages({\r\n  password_reset_email_sent: {\r\n    id: 'password_reset_email_sent',\r\n    defaultMessage: 'An email with security code has been sent.',\r\n    description: 'Notification that the email with password reset instructions has been sent'\r\n  },\r\n  password_reset_sms_sent: {\r\n    id: 'password_reset_sms_sent',\r\n    defaultMessage: 'A text message with security code has been sent.',\r\n    description: 'Notification that the SMS with password reset instructions has been sent'\r\n  }\r\n});\r\n\r\nclass PasswordResetView extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tel: '',\r\n      email: '',\r\n      password: '',\r\n      sent: false,\r\n      haveCode: false,\r\n      code: ''\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleEmailChange = this.handleEmailChange.bind(this);\r\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    this.handleCodeChange = this.handleCodeChange.bind(this);\r\n    this.handleShowCodeField = this.handleShowCodeField.bind(this);\r\n\r\n    // Connection will trigger change by changing the this.props.serverVersion.\r\n    props.tinode.connect()\r\n      .catch(err => {\r\n        this.props.onError(err.message, 'err');\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const parsed = HashNavigation.parseUrlHash(window.location.hash);\r\n    const newState = {\r\n      token: parsed.params.token,\r\n      scheme: parsed.params.scheme,\r\n      code: parsed.params.code || ''\r\n    }\r\n\r\n    this.savedCred = parsed.params.cred;\r\n    if (this.props.reqCredMethod && parsed.params.cred) {\r\n      newState[this.props.reqCredMethod] = this.savedCred;\r\n    }\r\n    this.setState(newState);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.reqCredMethod != this.props.reqCredMethod && this.props.reqCredMethod) {\r\n      this.setState({[this.props.reqCredMethod]: this.savedCred || ''});\r\n    }\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.token) {\r\n      // Reset using token.\r\n      this.props.onReset(this.state.password.trim(), {\r\n        scheme: 'token',\r\n        secret: this.state.token\r\n      });\r\n    } else if (this.state.code && this.props.reqCredMethod) {\r\n      // Reset using security code.\r\n      // The secret is structured as <code>:<cred_method>:<cred_value>, \"123456:email:alice@example.com\".\r\n      const cred = this.props.reqCredMethod == 'email' ? this.state.email.trim() : this.state.tel.trim();\r\n      this.props.onReset(this.state.password.trim(), {\r\n        scheme: 'code',\r\n        secret: btoa(`${this.state.code}:${this.props.reqCredMethod}:${cred}`)\r\n      });\r\n    } else {\r\n      // Send email or SMS with the secret code.\r\n      const email = this.state.email.trim();\r\n      const tel = this.state.tel.trim();\r\n      this.setState({email: email, tel: tel});\r\n      this.props.onRequest(this.props.reqCredMethod, email || tel)\r\n        .then(_ => {\r\n          this.setState({sent: true});\r\n          const msg = this.props.reqCredMethod == 'email' ? messages.password_reset_email_sent :\r\n            this.props.reqCredMethod == 'tel' ? messages.password_reset_sms_sent : null;\r\n          if (msg) {\r\n            this.props.onError(this.props.intl.formatMessage(msg), 'info');\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  handleEmailChange(e) {\r\n    this.setState({email: e.target.value});\r\n  }\r\n\r\n  handlePasswordChange(e) {\r\n    this.setState({password: e.target.value});\r\n  }\r\n\r\n  handleCodeChange(e) {\r\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\r\n  }\r\n\r\n  handleShowCodeField(e) {\r\n    e.preventDefault();\r\n    this.setState({haveCode: true});\r\n  }\r\n\r\n  render() {\r\n    const showCredentialInput = !((this.state.token || (this.state.code && this.props.reqCredMethod)) && this.state.scheme);\r\n    const showPasswordInput = !showCredentialInput || this.state.haveCode || this.state.sent;\r\n\r\n    const passwordInput = (<>\r\n        <label className=\"small gray\" htmlFor=\"new-password\">\r\n          <FormattedMessage id=\"label_new_password\"\r\n            defaultMessage=\"New password\"\r\n            description=\"Label for entering a new password\" />\r\n        </label>\r\n        <FormattedMessage id=\"new_password_placeholder\" defaultMessage=\"Enter new password\"\r\n          description=\"Placeholder for entering new password\">{\r\n          (placeholder) => <VisiblePassword\r\n            id=\"new-password\"\r\n            placeholder={placeholder}\r\n            autoComplete=\"new-password\"\r\n            value={this.state.password}\r\n            required={true} autoFocus={true}\r\n            onChange={this.handlePasswordChange} />\r\n        }</FormattedMessage>\r\n      </>);\r\n\r\n    const emailInput = (<>\r\n        {this.state.haveCode ?\r\n          null :\r\n          <label htmlFor=\"inputEmail\">\r\n            <FormattedMessage id=\"label_reset_password\"\r\n              defaultMessage=\"Send a password reset email\"\r\n              description=\"Label for password reset field\" />\r\n          </label>\r\n        }\r\n        <FormattedMessage id=\"credential_email_prompt\" defaultMessage=\"Your registration email\"\r\n          description=\"Placeholder for entering email\">{\r\n          (placeholder) => <input type=\"email\" id=\"inputEmail\"\r\n            placeholder={placeholder}\r\n            autoComplete=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleEmailChange}\r\n            required autoFocus />\r\n        }</FormattedMessage>\r\n      </>);\r\n\r\n    const phoneInput = (<>\r\n        {this.state.haveCode ?\r\n          null :\r\n          <div><label>\r\n            <FormattedMessage id=\"label_reset_password_tel\"\r\n              defaultMessage=\"Send SMS to reset password\"\r\n              description=\"Label for password reset field by phone\" />\r\n          </label></div>\r\n        }\r\n        <div>\r\n          <label className=\"small gray\">\r\n            <FormattedMessage id=\"mobile_phone_number\" defaultMessage=\"Mobile phone number\"\r\n              description=\"Prompt for entering a mobile phone number\" />\r\n          </label>\r\n        </div>\r\n        <div className=\"panel-form-row\">\r\n          <PhoneEdit\r\n            autoFocus={true}\r\n            onShowCountrySelector={this.props.onShowCountrySelector}\r\n            onSubmit={number => this.setState({tel: number})} />\r\n        </div>\r\n      </>);\r\n\r\n    const codeInput = (<>\r\n        <div>\r\n          <label className=\"small gray\" htmlFor=\"enter-confirmation-code\">\r\n            <FormattedMessage id=\"enter_confirmation_code_prompt\"\r\n              defaultMessage=\"Confirmation code\"\r\n              description=\"Request to enter confirmation code\" />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <FormattedMessage id=\"numeric_confirmation_code_prompt\"\r\n            defaultMessage=\"Numbers only\" description=\"Prompt for numeric conformation code\">{\r\n            (numbers_only) => <input type=\"text\" id=\"enter-confirmation-code\"\r\n              placeholder={numbers_only} maxLength={10}\r\n              value={this.state.code} onChange={this.handleCodeChange} required />\r\n          }</FormattedMessage>\r\n        </div>\r\n      </>);\r\n\r\n    const credentialInput = this.props.reqCredMethod == 'email' ?\r\n      emailInput : this.props.reqCredMethod == 'tel' ? phoneInput : null;\r\n\r\n    return (\r\n      <form id=\"password-reset-form\" onSubmit={this.handleSubmit}>\r\n        {!this.state.sent && showCredentialInput ? credentialInput : null}\r\n        {this.state.haveCode || this.state.sent ? codeInput : null}\r\n        {showPasswordInput ? passwordInput : null}\r\n        <div className=\"dialog-buttons\">\r\n          {this.state.haveCode || this.state.sent || this.state.token || this.state.code ? null :\r\n            <a href=\"#\" onClick={this.handleShowCodeField} style={{marginRight: 'auto'}}>\r\n              <FormattedMessage id=\"password_i_have_code\" defaultMessage=\"I have code\"\r\n                description=\"Call to open field to enter password reset code\" />\r\n            </a>\r\n          }\r\n          <button className=\"primary\" type=\"submit\">{\r\n            showPasswordInput ?\r\n              <FormattedMessage id=\"button_reset\" defaultMessage=\"Reset\" description=\"Button [Reset]\" />\r\n            :\r\n              <FormattedMessage id=\"button_send_request\" defaultMessage=\"Send request\"\r\n                description=\"Button [Send request]\" />\r\n          }</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(PasswordResetView);\r\n","// Editor for a phone number.\r\n\r\nimport React from 'react';\r\nimport { defineMessages, injectIntl } from 'react-intl';\r\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\r\nimport examples from 'libphonenumber-js/mobile/examples'\r\n\r\nimport * as dcodes from '../dcodes.json';\r\nimport { flagEmoji } from '../lib/strformat';\r\n\r\nconst messages = defineMessages({\r\n  mobile_number_required: {\r\n    id: 'mobile_number_required',\r\n    defaultMessage: 'Mobile phone number required',\r\n    description: 'Error message'\r\n  }\r\n});\r\n\r\nclass PhoneEdit extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.codeMap = {};\r\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\r\n\r\n    const code = props.countryCode || 'US';\r\n    const dial = this.codeMap[code];\r\n\r\n    this.state = {\r\n      countryCode: code,\r\n      dialCode: dial,\r\n      localNumber: '',\r\n      placeholderNumber: this.placeholderNumber(code, dial)\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFinished = this.handleFinished.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.showCountrySelector = this.showCountrySelector.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    const prefix = `+${this.state.dialCode}`;\r\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\r\n    formatted = formatted.substring(prefix.length).trim();\r\n    this.setState({localNumber: formatted});\r\n  }\r\n\r\n  handleFinished(e) {\r\n    e.preventDefault();\r\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\r\n    let number = null;\r\n    try {\r\n      number = parsePhoneNumber(`+${raw}`);\r\n    } catch (err) {}\r\n\r\n    if (!number || !number.isValid()) {\r\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\r\n      return;\r\n    }\r\n\r\n    this.inputField.setCustomValidity('');\r\n    this.props.onSubmit(number.format('E.164'));\r\n  }\r\n\r\n\r\n  handleKeyDown(e) {\r\n    if (e.key === 'Enter') {\r\n      this.handleFinished(e);\r\n    }\r\n  }\r\n\r\n  showCountrySelector() {\r\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\r\n      (code, dial) => {\r\n          this.setState({\r\n            countryCode: code,\r\n            dialCode: dial,\r\n            placeholderNumber: this.placeholderNumber(code, dial)\r\n        })\r\n      });\r\n  }\r\n\r\n  // Filter out characters not permitted in a phone number.\r\n  filterNumber(number) {\r\n    if (!number) {\r\n      return number;\r\n    }\r\n    // Leave numbers, space, (, ), -, and .\r\n    // The + is not allowed: it's handled by the country code portion.\r\n    return number.replace(/[^-\\s().\\d]/g, '');\r\n  }\r\n\r\n  placeholderNumber(code, dial) {\r\n    const sample = getExampleNumber(code, examples);\r\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\r\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\r\n          +{this.state.dialCode}&nbsp;</span>\r\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\r\n            value={this.state.localNumber} onChange={this.handleChange}\r\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\r\n            required autoFocus={this.props.autoFocus} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(PhoneEdit);\r\n"],"names":["messages","defineMessages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","PasswordResetView","React","constructor","props","super","this","state","tel","email","password","sent","haveCode","code","handleSubmit","bind","handleEmailChange","handlePasswordChange","handleCodeChange","handleShowCodeField","tinode","connect","catch","err","onError","message","componentDidMount","parsed","HashNavigation","parseUrlHash","window","location","hash","newState","token","params","scheme","savedCred","cred","reqCredMethod","setState","componentDidUpdate","prevProps","prevState","e","preventDefault","onReset","trim","secret","btoa","onRequest","then","_","msg","intl","formatMessage","target","value","replace","render","showCredentialInput","showPasswordInput","passwordInput","className","htmlFor","FormattedMessage","placeholder","VisiblePassword","autoComplete","required","autoFocus","onChange","emailInput","type","phoneInput","PhoneEdit","onShowCountrySelector","onSubmit","number","codeInput","numbers_only","maxLength","credentialInput","href","onClick","style","marginRight","injectIntl","mobile_number_required","codeMap","dcodes","forEach","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","substring","length","raw","parsePhoneNumber","isValid","inputField","setCustomValidity","format","key","sample","getExampleNumber","examples","formatInternational","flagEmoji","ref","onKeyDown","onBlur"],"sourceRoot":""}