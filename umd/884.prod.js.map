{"version":3,"file":"884.prod.js","mappings":"4MASA,MAAMA,UAA6BC,IAAAA,cACjCC,WAAAA,CAAYC,GACVC,MAAMD,GAENE,KAAKC,UAAY,GACjB,MAAM,kBAAEC,GAAsBJ,EAAMK,KACpCC,EAAeC,SAAQC,IACPA,EAAGC,KAAKC,MAAM,KACtBH,SAAQI,IACZT,KAAKC,UAAUS,KAAK,CAClBH,KAAME,EAAKE,OACXC,KAAMN,EAAGM,KACTC,MAAMC,EAAAA,EAAAA,IAAUR,EAAGM,MACnBG,KAAMb,EAAkBI,EAAGM,KAAM,CAACI,KAAM,YACxC,GACF,IAGJhB,KAAKC,UAAUgB,MAAK,CAACC,EAAGC,IAAMD,EAAEH,KAAKK,cAAcD,EAAEJ,OACvD,CAEAM,iBAAAA,GACMrB,KAAKsB,aACPtB,KAAKsB,YAAYC,eAAe,CAACC,MAAO,SAAUC,OAAQ,WAE9D,CAEAC,MAAAA,GACE,MAAMzB,EAAY,GACZ0B,EAAW3B,KAAKF,MAAM6B,UAAY,KAYxC,OAXA3B,KAAKC,UAAUI,SAAQ,CAACuB,EAAGC,KACzB,MAAMC,EAASF,EAAEhB,MAAQe,EAAW,YAAc,GAClD1B,EAAUS,KAAKd,IAAAA,cAAA,MAAImC,UAAWD,EAAOE,IAAKH,EACxCI,IAAKA,IAAYL,EAAEhB,MAAQe,IAAW3B,KAAKsB,YAAcW,EAAG,EAC5DC,QAASC,GAAKnC,KAAKF,MAAMsC,SAASR,EAAEhB,KAAMgB,EAAErB,OAC5CX,IAAAA,cAAA,QAAMmC,UAAU,gBAAgBH,EAAEf,MAClCjB,IAAAA,cAAA,QAAMmC,UAAU,WAAU,IAAOH,EAAEb,MACnCnB,IAAAA,cAAA,QAAMmC,UAAU,aAAY,KAAQH,EAAErB,OAClC,IAINX,IAAAA,cAAA,OAAKmC,UAAU,mBAAmBD,MAAO,CAACO,OAAQ,UAChDzC,IAAAA,cAAA,MAAImC,UAAU,0BACX9B,GAIT,EAGF,SAAeqC,EAAAA,EAAAA,YAAW3C,E","sources":["webpack://tinode-webapp/./src/widgets/phone-country-selector.jsx"],"sourcesContent":["// Selector for country dialing code.\r\n\r\nimport React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport * as dcodes from '../dcodes.json';\r\n\r\nimport { flagEmoji } from '../lib/strformat';\r\n\r\nclass PhoneCountrySelector extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.countries = [];\r\n    const { formatDisplayName } = props.intl;\r\n    dcodes.default.forEach(dc => {\r\n      const parts = dc.dial.split(',');\r\n      parts.forEach(part => {\r\n        this.countries.push({\r\n          dial: part.trim(),\r\n          code: dc.code,\r\n          flag: flagEmoji(dc.code),\r\n          name: formatDisplayName(dc.code, {type: 'region'})\r\n        });\r\n      });\r\n    });\r\n\r\n    this.countries.sort((a, b) => a.name.localeCompare(b.name));\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.selectedRef) {\r\n      this.selectedRef.scrollIntoView({block: 'center', inline: 'nearest'});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const countries = [];\r\n    const selected = this.props.selected || 'US';\r\n    this.countries.forEach((c, idx) => {\r\n      const style = (c.code == selected ? 'selected ' : '');\r\n      countries.push(<li className={style} key={idx}\r\n        ref={ref => {if (c.code == selected) {this.selectedRef = ref}}}\r\n        onClick={_ => this.props.onSubmit(c.code, c.dial)}>\r\n        <span className=\"country-flag\">{c.flag}</span>\r\n        <span className=\"country\">&nbsp;{c.name}</span>\r\n        <span className=\"dial-code\">&nbsp;+{c.dial}</span>\r\n      </li>);\r\n    });\r\n\r\n    return (\r\n      <div className=\"scrollable-panel\" style={{height: '30rem'}}>\r\n        <ul className=\"phone-country-selector\">\r\n          {countries}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(PhoneCountrySelector);\r\n"],"names":["PhoneCountrySelector","React","constructor","props","super","this","countries","formatDisplayName","intl","dcodes","forEach","dc","dial","split","part","push","trim","code","flag","flagEmoji","name","type","sort","a","b","localeCompare","componentDidMount","selectedRef","scrollIntoView","block","inline","render","selected","c","idx","style","className","key","ref","onClick","_","onSubmit","height","injectIntl"],"sourceRoot":""}