{"version":3,"file":"752.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/credential-edit.jsx","webpack://tinode-webapp/./src/views/account-settings-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Enter one credential at a time.\r\n\r\nimport React from 'react';\r\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\r\nimport PhoneEdit from './phone-edit.jsx';\r\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\r\n\r\nconst messages = defineMessages({\r\n  password_reset_email_sent: {\r\n    id: 'password_reset_email_sent',\r\n    defaultMessage: 'An email with security code has been sent.',\r\n    description: 'Notification that the email with password reset instructions has been sent'\r\n  },\r\n  password_reset_sms_sent: {\r\n    id: 'password_reset_sms_sent',\r\n    defaultMessage: 'A text message with security code has been sent.',\r\n    description: 'Notification that the SMS with password reset instructions has been sent'\r\n  },\r\n});\r\n\r\nclass CredentialEdit extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      code: '',\r\n      tel: '',\r\n      email: '',\r\n      sent: false\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleEmailChange = this.handleEmailChange.bind(this);\r\n    this.handlePhoneChange = this.handlePhoneChange.bind(this);\r\n    this.handleCodeChange = this.handleCodeChange.bind(this);\r\n  }\r\n\r\n  static formatPhoneNumber(raw) {\r\n    let number;\r\n    try {\r\n      number = parsePhoneNumber(raw);\r\n    } catch (err) {}\r\n    return number ? number.formatInternational() : raw;\r\n  }\r\n\r\n  handleEmailChange(e) {\r\n    this.setState({email: e.target.value});\r\n  }\r\n\r\n  handlePhoneChange(number) {\r\n    this.setState({tel: number});\r\n  }\r\n\r\n  handleCodeChange(e) {\r\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const value = this.props.method == 'email' ? this.state.email : this.state.tel;\r\n    if (this.state.code) {\r\n      this.props.onError(null);\r\n      this.props.onCredConfirm(this.props.method, this.state.code);\r\n    } else if (value) {\r\n      this.props.onCredAdd(this.props.method, value);\r\n      this.setState({sent: true});\r\n      const msg = this.props.method == 'email' ? messages.password_reset_email_sent : messages.password_reset_sms_sent;\r\n      this.props.onError(this.props.intl.formatMessage(msg), 'info');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const readyForCode = this.state.sent || !this.props.done;\r\n    const rawValue = readyForCode ? (this.state.tel || this.state.email) : this.props.val;\r\n    const formattedValue = this.props.method == 'tel' ? CredentialEdit.formatPhoneNumber(rawValue) : rawValue;\r\n\r\n    const changeEmail = (\r\n      <><div className=\"panel-form-row\">\r\n        <label className=\"large\"><FormattedMessage id=\"change_email\" defaultMessage=\"Change email\"\r\n          description=\"Prompt to change current email\" /></label>\r\n      </div>\r\n      <div className=\"group\">\r\n        <label className=\"small gray\">\r\n          <FormattedMessage id=\"current_email\" defaultMessage=\"Current email\" description=\"Label for old email\" />\r\n        </label>\r\n      </div></>);\r\n\r\n    const changePhone = (\r\n      <><div className=\"panel-form-row\">\r\n      <label className=\"large\"><FormattedMessage id=\"change_phone\" defaultMessage=\"Change phone number\"\r\n        description=\"Prompt to change current phone number\"/></label>\r\n      </div>\r\n      <div className=\"group\">\r\n        <label className=\"small gray\">\r\n          <FormattedMessage id=\"current_phone\" defaultMessage=\"Current phone number\" description=\"Label for old phone\" />\r\n        </label>\r\n      </div></>\r\n    );\r\n\r\n    const newEmailLabel = (<label className=\"small gray\">\r\n        <FormattedMessage id=\"new_email\" defaultMessage=\"New email\"\r\n          description=\"Prompt for entering a new email\" />\r\n      </label>);\r\n\r\n    const newEmailInput = (\r\n      <><div className=\"group\">{newEmailLabel}</div>\r\n      <div className=\"group\">\r\n        <FormattedMessage id=\"email_prompt\" defaultMessage=\"Email, e.g. jdoe@example.com\"\r\n          description=\"Input placeholder for email entry\">{\r\n          (email_prompt) => <input type=\"email\" placeholder={email_prompt} autoComplete=\"email\"\r\n            value={this.state.email} onChange={this.handleEmailChange} required/>\r\n        }</FormattedMessage>\r\n      </div></>\r\n    );\r\n\r\n    const newPhoneLabel = (<label className=\"small gray\">\r\n        <FormattedMessage id=\"new_phone_number\" defaultMessage=\"New phone number\"\r\n        description=\"Prompt for entering a new telephone number\" />\r\n      </label>);\r\n\r\n    const newPhoneInput = (\r\n      <><div className=\"group\">{newPhoneLabel}</div>\r\n      <div className=\"panel-form-row\">\r\n        <PhoneEdit\r\n          autoFocus={true}\r\n          onShowCountrySelector={this.props.onShowCountrySelector}\r\n          onSubmit={this.handlePhoneChange} />\r\n      </div></>\r\n    );\r\n\r\n    const codeInput = (\r\n      <><div className=\"group\">\r\n        <label className=\"small gray\"><FormattedMessage id=\"enter_confirmation_code_prompt\" defaultMessage=\"Confirmation code\"\r\n            description=\"Request to enter confirmation code\" /></label>\r\n      </div>\r\n      <div className=\"group\">\r\n        <FormattedMessage id=\"numeric_confirmation_code_prompt\" defaultMessage=\"Numbers only\"\r\n          description=\"Prompt for numeric conformation code\">{\r\n          (numbers_only) => <input type=\"text\" placeholder={numbers_only} maxLength={10}\r\n          value={this.state.code} onChange={this.handleCodeChange} required/>\r\n        }</FormattedMessage>\r\n      </div></>\r\n    );\r\n\r\n    return (<form className=\"panel-form-column\" onSubmit={this.handleSubmit}>\r\n      {readyForCode ?\r\n        (this.props.method == 'email' ? newEmailLabel : this.props.method == 'tel' ? newPhoneLabel : null)\r\n        :\r\n        (this.props.method == 'email' ? changeEmail : this.props.method == 'tel' ? changePhone : null)\r\n      }\r\n      <div className=\"panel-form-row\">\r\n        <tt className=\"quoted\">{formattedValue}</tt>\r\n      </div>\r\n      {readyForCode ?\r\n        null\r\n        :\r\n        (this.props.method == 'email' ? newEmailInput : this.props.method == 'tel' ? newPhoneInput : null)\r\n      }\r\n      {readyForCode ? codeInput : null}\r\n      <div className=\"dialog-buttons\">\r\n        <button className=\"secondary\" onClick={this.props.onCancel}>\r\n          <FormattedMessage id=\"button_cancel\" defaultMessage=\"Cancel\" description=\"Button [Cancel]\" />\r\n        </button>\r\n        <button className=\"primary\" type=\"submit\" >\r\n          <FormattedMessage id=\"button_ok\" defaultMessage=\"OK\" description=\"Button [OK]\" />\r\n        </button>\r\n      </div>\r\n    </form>);\r\n  }\r\n}\r\n\r\nexport default injectIntl(CredentialEdit);\r\n","// Edit account parameters.\r\nimport React from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\r\n\r\nimport AvatarUpload from '../widgets/avatar-upload.jsx';\r\nimport BadgeList from '../widgets/badge-list.jsx';\r\n\r\nimport { makeImageUrl } from '../lib/blob-helpers.js';\r\nimport { MAX_TITLE_LENGTH, MAX_TOPIC_DESCRIPTION_LENGTH } from '../config.js';\r\nimport CredentialEdit from '../widgets/credential-edit.jsx';\r\n\r\nfunction _clip(str, length) {\r\n  return str && str.substring(0, length);\r\n}\r\n\r\nexport default class AccountSettingsView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const me = this.props.tinode.getMeTopic();\r\n    this.state = {\r\n      fullName: _clip(me.public ? me.public.fn : undefined, MAX_TITLE_LENGTH),\r\n      description: _clip(me.public ? me.public.note : undefined, MAX_TOPIC_DESCRIPTION_LENGTH),\r\n      avatar: makeImageUrl(me.public ? me.public.photo : null),\r\n      credentials: me.getCredentials() || [],\r\n      credEdit: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const me = this.props.tinode.getMeTopic();\r\n    me.onCredsUpdated = _ => this.setState({credentials: me.getCredentials()});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const me = this.props.tinode.getMeTopic();\r\n    me.onCredsUpdated = null;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.credEdit) {\r\n      return (\r\n        <CredentialEdit\r\n          method={this.state.credEdit.meth}\r\n          val={this.state.credEdit.val}\r\n          done={this.state.credEdit.done}\r\n          onShowCountrySelector={this.props.onShowCountrySelector}\r\n          onCredAdd={this.props.onCredAdd}\r\n          onCredConfirm={this.props.onCredConfirm}\r\n          onCancel={_ => this.setState({credEdit: undefined})}\r\n          onError={this.props.onError} />\r\n      );\r\n    }\r\n\r\n    // Count how many times each method is validated.\r\n    const validated = {};\r\n    this.state.credentials.forEach(cred => {\r\n      if (cred.done) {\r\n        validated[cred.meth] = (validated[cred.meth] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    const credentials = [];\r\n    this.state.credentials.forEach((cred, idx) => {\r\n      if (!['email', 'tel'].includes(cred.meth)) {\r\n        // Skip unknown methods.\r\n        return ;\r\n      }\r\n\r\n      let val = cred.val\r\n      if (cred.meth == 'tel') {\r\n        const number = parsePhoneNumber(cred.val);\r\n        val = number ? number.formatInternational() : cred.val;\r\n      }\r\n\r\n      credentials.push(\r\n        <div className=\"group quoted\" key={idx}>\r\n          <tt className=\"clickable\" onClick={e => {e.preventDefault(); this.setState({credEdit: cred});}}>{val}</tt>\r\n          <span> {cred.done ? null : <i className=\"material-icons\">pending</i>}&nbsp;\r\n            {!cred.done || validated[cred.meth] > 1 || this.props.reqCredMethod != cred.meth ?\r\n              <a href=\"#\" onClick={e => {e.preventDefault(); this.props.onCredDelete(cred.meth, cred.val);}}>\r\n                <i className=\"material-icons\">delete</i>\r\n              </a>\r\n            :\r\n            null}\r\n          </span>\r\n        </div>);\r\n    });\r\n    if (credentials.length > 0) {\r\n      // Add title as the first element.\r\n      credentials.unshift(\r\n        <label className=\"small\" key={'title'}>\r\n          <FormattedMessage id=\"label_user_contacts\" defaultMessage=\"Contacts\"\r\n            description=\"Label for user contacts\" />\r\n        </label>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"scrollable-panel\">\r\n        <div className=\"panel-form-column\">\r\n          <a href=\"#\" className=\"flat-button float-right\" onClick={e => {e.preventDefault(); this.props.onNavigate('general');}}>\r\n            <i className=\"material-icons\">edit</i>&nbsp;\r\n            <FormattedMessage id=\"button_edit\" defaultMessage=\"Edit\" description=\"Call to action [Edit]\" />\r\n          </a>\r\n          <center>\r\n            <AvatarUpload\r\n              tinode={this.props.tinode}\r\n              avatar={this.state.avatar}\r\n              readOnly={true}\r\n              uid={this.props.myUserId}\r\n              title={this.state.fullName} />\r\n          </center>\r\n          <div className=\"group\">\r\n            <label className=\"small\">\r\n              <FormattedMessage id=\"label_your_name\" defaultMessage=\"Your name\"\r\n                description=\"Label for full name editing\" />\r\n            </label>\r\n            <div className=\"large ellipsized\">{this.state.fullName}</div>\r\n          </div>\r\n          <div className=\"group\">\r\n            <label className=\"small\"><FormattedMessage id=\"label_user_id\" defaultMessage=\"ID:\"\r\n              description=\"Label for user address (ID)\" /></label>&nbsp;\r\n            <tt>{this.props.myUserId}</tt>\r\n          </div>\r\n          <div className=\"group\">\r\n            <BadgeList trustedBadges={this.props.trustedBadges} />\r\n          </div>\r\n          {this.state.description ?\r\n            <div className=\"group\">\r\n              <label className=\"small\">\r\n                <FormattedMessage id=\"label_description\" defaultMessage=\"Description\"\r\n                  description=\"Label for editing topic description\" />\r\n              </label>\r\n              <div className=\"quoted\">{this.state.description}</div>\r\n            </div> : null}\r\n        </div>\r\n        <div className=\"hr\" />\r\n        <div className=\"panel-form-column\">\r\n          <div className=\"group\">{credentials}</div>\r\n        </div>\r\n        <div className=\"hr\" />\r\n        <div className=\"panel-form-column\">\r\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('notif');}}>\r\n            <i className=\"material-icons\">notifications</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_notifications\"\r\n              defaultMessage=\"Notifications\" description=\"Sidepanel title for AccNotificationsView.\" />\r\n          </a>\r\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('security');}}>\r\n            <i className=\"material-icons\">security</i>&nbsp;<FormattedMessage id=\"button_security\"\r\n              defaultMessage=\"Security\" description=\"Navigaton button for security panel.\" />\r\n          </a>\r\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('support');}}>\r\n            <i className=\"material-icons\">contact_support</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_support\"\r\n              defaultMessage=\"Support\" description=\"Sidepanel title for AccSupportView.\" />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","// Editor for a phone number.\r\n\r\nimport React from 'react';\r\nimport { defineMessages, injectIntl } from 'react-intl';\r\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\r\nimport examples from 'libphonenumber-js/mobile/examples'\r\n\r\nimport * as dcodes from '../dcodes.json';\r\nimport { flagEmoji } from '../lib/strformat';\r\n\r\nconst messages = defineMessages({\r\n  mobile_number_required: {\r\n    id: 'mobile_number_required',\r\n    defaultMessage: 'Mobile phone number required',\r\n    description: 'Error message'\r\n  }\r\n});\r\n\r\nclass PhoneEdit extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.codeMap = {};\r\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\r\n\r\n    const code = props.countryCode || 'US';\r\n    const dial = this.codeMap[code];\r\n\r\n    this.state = {\r\n      countryCode: code,\r\n      dialCode: dial,\r\n      localNumber: '',\r\n      placeholderNumber: this.placeholderNumber(code, dial)\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFinished = this.handleFinished.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.showCountrySelector = this.showCountrySelector.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    const prefix = `+${this.state.dialCode}`;\r\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\r\n    formatted = formatted.substring(prefix.length).trim();\r\n    this.setState({localNumber: formatted});\r\n  }\r\n\r\n  handleFinished(e) {\r\n    e.preventDefault();\r\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\r\n    let number = null;\r\n    try {\r\n      number = parsePhoneNumber(`+${raw}`);\r\n    } catch (err) {}\r\n\r\n    if (!number || !number.isValid()) {\r\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\r\n      return;\r\n    }\r\n\r\n    this.inputField.setCustomValidity('');\r\n    this.props.onSubmit(number.format('E.164'));\r\n  }\r\n\r\n\r\n  handleKeyDown(e) {\r\n    if (e.key === 'Enter') {\r\n      this.handleFinished(e);\r\n    }\r\n  }\r\n\r\n  showCountrySelector() {\r\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\r\n      (code, dial) => {\r\n          this.setState({\r\n            countryCode: code,\r\n            dialCode: dial,\r\n            placeholderNumber: this.placeholderNumber(code, dial)\r\n        })\r\n      });\r\n  }\r\n\r\n  // Filter out characters not permitted in a phone number.\r\n  filterNumber(number) {\r\n    if (!number) {\r\n      return number;\r\n    }\r\n    // Leave numbers, space, (, ), -, and .\r\n    // The + is not allowed: it's handled by the country code portion.\r\n    return number.replace(/[^-\\s().\\d]/g, '');\r\n  }\r\n\r\n  placeholderNumber(code, dial) {\r\n    const sample = getExampleNumber(code, examples);\r\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\r\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\r\n          +{this.state.dialCode}&nbsp;</span>\r\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\r\n            value={this.state.localNumber} onChange={this.handleChange}\r\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\r\n            required autoFocus={this.props.autoFocus} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(PhoneEdit);\r\n"],"names":["messages","defineMessages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","CredentialEdit","React","constructor","props","super","this","state","code","tel","email","sent","handleSubmit","bind","handleEmailChange","handlePhoneChange","handleCodeChange","formatPhoneNumber","raw","number","parsePhoneNumber","err","formatInternational","e","setState","target","value","replace","preventDefault","method","onError","onCredConfirm","onCredAdd","msg","intl","formatMessage","render","readyForCode","done","rawValue","val","formattedValue","changeEmail","className","FormattedMessage","changePhone","newEmailLabel","newEmailInput","email_prompt","type","placeholder","autoComplete","onChange","required","newPhoneLabel","newPhoneInput","PhoneEdit","autoFocus","onShowCountrySelector","onSubmit","codeInput","numbers_only","maxLength","onClick","onCancel","injectIntl","_clip","str","length","substring","AccountSettingsView","me","tinode","getMeTopic","fullName","public","fn","undefined","MAX_TITLE_LENGTH","description","note","MAX_TOPIC_DESCRIPTION_LENGTH","avatar","makeImageUrl","photo","credentials","getCredentials","credEdit","componentDidMount","onCredsUpdated","_","componentWillUnmount","meth","validated","forEach","cred","idx","includes","push","key","reqCredMethod","href","onCredDelete","unshift","onNavigate","AvatarUpload","readOnly","uid","myUserId","title","BadgeList","trustedBadges","mobile_number_required","codeMap","dcodes","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","trim","isValid","inputField","setCustomValidity","format","sample","getExampleNumber","examples","flagEmoji","ref","onKeyDown","onBlur"],"sourceRoot":""}